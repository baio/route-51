// Generated by CoffeeScript 1.9.0
(function() {
  var Router, nextMatch,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  nextMatch = function(match, routes) {
    var route, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = routes.length; _i < _len; _i++) {
      route = routes[_i];
      console.log(">>", route.name);
      _results.push(match("/" + route.route.url, function(_match) {
        var nested;
        _match("").to(route);
        nested = routes.filter(function(f) {
          return f.name.indexOf(route.name + ".") === 0;
        });
        return nextMatch(_match, nested);
      }));
    }
    return _results;
  };

  Router = (function() {
    function Router(map, _at_opts) {
      this.opts = _at_opts;
      this._hashChanged = __bind(this._hashChanged, this);
      this._recognizer = new RouteRecognizer();
      this._recognizer.map(function(match) {
        var key, val;
        return nextMatch(match, (function() {
          var _results;
          _results = [];
          for (key in map) {
            val = map[key];
            _results.push({
              name: key,
              route: val
            });
          }
          return _results;
        })());
      });

      /*            
      .map (m) =>                         
          match("/" + m.route.url, (match) =>
              .to(m)
       */
      hasher.changed.add(this._hashChanged);
      hasher.initialized.add(this._hashChanged);
      hasher.init();
    }

    Router.prototype._hashChanged = function(newHash, oldHash) {
      var recognized;
      recognized = this._recognizer.recognize(newHash);
      return console.log("222", recognized);
    };

    return Router;

  })();

  window.Router = Router;

}).call(this);
